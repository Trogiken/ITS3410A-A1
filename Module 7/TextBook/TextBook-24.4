24.4 Stop a Process
Problem
You want to stop a process on the system.

Solution
To stop a process, use the Stop-Process cmdlet, as shown in Example 24-2.

Example 24-2. Stopping a process using the Stop-Process cmdlet
PS > notepad
PS > Get-Process Notepad

Handles  NPM(K)  PM(K)  WS(K)  VM(M)  CPU(s)    Id ProcessName
-------  ------  -----  -----  -----  ------    -- -----------
     42       3   1276   3916     32    0.09  3520 notepad

PS > Stop-Process -ProcessName notepad
PS > Get-Process Notepad
Get-Process : Cannot find a process with the name 'Notepad'. Verify the
process name and call the cmdlet again.
At line:1 char:12
+ Get-Process <<<< Notepad
Discussion
Although the parameters of the Stop-Process cmdlet are useful in their own right, PowerShell’s pipeline model lets you be even more precise. The Stop-Process cmdlet stops any processes that you pipeline into it, so an advanced process set generated by Get-Process automatically turns into an advanced process set for the Stop-Process cmdlet to operate on:

PS > Get-Process | Where-Object { $_.WorkingSet -lt 10mb } |
    Sort-Object -Descending Name | Stop-Process -WhatIf

What if: Performing operation "Stop-Process" on Target "svchost (1368)".
What if: Performing operation "Stop-Process" on Target "sqlwriter (1772)".
What if: Performing operation "Stop-Process" on Target "qttask (3672)".
What if: Performing operation "Stop-Process" on Target "Ditto (2892)".
What if: Performing operation "Stop-Process" on Target "ctfmon (3904)".
What if: Performing operation "Stop-Process" on Target "csrss (848)".
What if: Performing operation "Stop-Process" on Target "BrmfRsmg (1560)".
What if: Performing operation "Stop-Process" on Target "AutoHotkey (3460)".
What if: Performing operation "Stop-Process" on Target "alg (1084)".
NOTE
Notice that this example uses the -WhatIf flag on the Stop-Process cmdlet. This flag lets you see what would happen if you were to run the command, but doesn’t actually perform the action.

Another common need when it comes to stopping a process is simply waiting for one to exit. Most scripts handle this by creating a loop that exits only when the Get-Process cmdlet returns no results for the process in question. PowerShell greatly simplifies this need by offering the Wait-Process cmdlet, which lets you pause your script until the specified process has exited. If you still want some degree of control while waiting for the process to stop, the -Timeout parameter lets you control how long PowerShell should wait for the process to exit. When the timeout elapses, PowerShell returns control to your script—giving you the opportunity to continue waiting, forcibly terminate the process, or do whatever else you wish.

For more information about the Stop-Process cmdlet, type Get-Help Stop-Process. For more information about the Wait-Process cmdlet, type Get-Help Wait-Process.